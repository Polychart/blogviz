function linechart(div, data) {
  chart = {}
  if (!div || !data) {
    // throw some error
    return
  }

  chart.div = div
  chart.data = data

  chart._width = 500 
  chart._height = 400
  chart._padding = 10
  chart._min = d3.min(data)
  chart._max = d3.max(data)
  chart._stroke = 3
  chart._colour = "steelblue"
  chart._labels = String // function from index => x-label
  chart._labelsize = 13
  chart._labelfont = "Arial"
  chart._gridcolour = "#DDDDDD"
  chart._gridwidth = 3

  // blah blah blah, this should be autogenerated
  chart.width = function(width) { chart._width = width; return chart; }
  chart.height = function(height) { chart._height = height; return chart; }
  chart.padding = function(padding) { chart._padding = padding; return chart; }
  chart.min = function(min) { chart._min = min; return chart; }
  chart.max = function(max) { chart._max = max; return chart; }
  chart.colour = function(colour) { chart._colour = colour; return chart; }
  chart.stroke = function(stroke) { chart._stroke = stroke; return chart; }
  chart.labelsize = function(labelsize) { chart._labelsize = labelsize; return chart; }
  chart.labelfont = function(labelfont) { chart._labelfont = labelfont; return chart; }
  chart.gridcolour = function(gridcolour) { chart._gridcolour = gridcolour; return chart; }
  chart.gridwidth = function(gridwidth) { chart._gridwidth = gridwidth; return chart; }
  // this is the only tricky one
  chart.labels = function(labels) {
    chart._labels = function(i) { return labels[i] };
    return chart;
  }

  chart.plot = function() {
    // scales
    var x = d3.scale.linear()
      .domain([0, data.length-1])
      .range([0, this._width])
    var y = d3.scale.linear()
      .domain([this._max, this._min])
      .range([0, this._height])
    // function to create a line
    var line = d3.svg.line()
      .x(function(d,i) { return x(i) })
      .y(function(d) { return y(d) })
    // set up the main graphic
    var vis = d3.select(div)
      .append("svg:svg")
      .attr("width", this._width+ 2*this._padding)
      .attr("height", this._height + 2*this._padding)
    this.g = vis.append("svg:g")
      .attr("transform", "translate("+this._padding+","+this._padding+")")
    // draw the x-labels at the bottom
    this.g.selectAll(".xLabel")
        .data(x.ticks(5))
        .enter().append("svg:text")
        .attr("class", "xLabel")
        .text(this._labels)
        .attr("x", function(d) { return x(d) })
        .attr("y", this._height + this._padding/2)
        .attr("text-anchor", "middle")
        .attr("font", this._labelfont)
        .attr("font-size", this._labelsize)
    // draw the y-labels and lines
    this.g.selectAll(".yLines")
        .data(y.ticks(3))
        .enter().append("svg:line")
        .attr("x1", x(0))
        .attr("y1", y)
        .attr("x2", x(data.length -1))
        .attr("y2", y)
        .style("stroke", this._gridcolour)
        .style("stroke-width", this._gridwidth)
    this.g.selectAll(".yLabel")
        .data(y.ticks(3))
        .enter().append("svg:text")
        .attr("class", "yLabel")
        .text(String)
        .attr("x", -this._padding/2)
        .attr("y", function(d) { return y(d) })
        .attr("text-anchor", "right")
        .attr("font", this._labelfont)
        .attr("font-size", this._labelsize)
    // draw the actual lines
    this.g.append("svg:path").attr("d", line(data))
      .style("fill", "none")
      .style("stroke", this._colour)
      .style("stroke-width", this._stroke)
    // draw the circles and attach mouseover event handlers
    this.g.selectAll(".points")
      .data(data)
      .enter().append("svg:circle")
      .attr("cx", function(d, i) { return x(i) })
      .attr("cy", y)
      .attr("r", this._stroke)
      .style("fill", this._colour)
      .on("mouseover", function(d, i) {
        d3.select(div).select('g') //chart.g doesn't work for multiple charts
         .append("svg:text")
         .attr("class", "mouseoverText")
         .attr("x", x(i))
         .attr("y", y(d)-10)
         .attr("text-anchor", "middle")
         .text(String(d))
       })
      .on("mouseout", function(d) {
        d3.select(div).select('g')
          .selectAll(div + " .mouseoverText").remove()
      })

    return chart
  }

  return chart
}
